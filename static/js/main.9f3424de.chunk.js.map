{"version":3,"sources":["Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","Searchfield","SearchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oOAwBeA,EArBE,SAAC,GAAa,EAAZC,OAEjB,MAAM,IAAIC,MAAM,aCUHC,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAChC,OACK,yBAAKC,UAAY,OACT,2BACEA,UAAY,gCACZC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCEXK,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,YCeMC,E,kDAlBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAKX,MAAMK,a,GAfOQ,aC8EZC,E,kDAhEf,aAAe,IAAD,8BAEd,gBAkBAC,eAAiB,SAACC,GAElB,EAAKJ,SAAS,CAAEnB,YAAauB,EAAMC,OAAOC,SAlB1C,EAAKX,MAAQ,CAEbjB,OAAQ,GAERG,YAAa,IARC,E,gEAcM,IAAD,OAClB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BAa9B,IAAD,OAEHC,EAAgBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAE/C,OAAOA,EAAMC,KAAKC,cAAcC,SAAS,EAAKtB,MAAMd,YAAYmC,kBAIhE,OAAgC,IAA7BjB,KAAKJ,MAAMjB,OAAOwC,OACb,wBAAInC,UAAU,MAAd,eAIC,yBAAKA,UAAY,MAEb,wBAAIA,UAAU,MAAd,kBAEA,kBAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUzB,OAAUkC,W,GApDlBX,aCFZkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfiC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAA5C,GACLwC,QAAQxC,MAAM,4CAA6CA,M,MCxFjE6C,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDczC,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,GAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCpB,MAAMmB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAAC,GAEJ,IAAM2C,EAAc3C,EAAS0C,QAAQE,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMhD,MAAK,SAAAuB,GACjCA,EAAa0B,aAAajD,MAAK,WAC7Ba,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMhD,MAAK,WACjC6B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCrC/BE,I","file":"static/js/main.9f3424de.chunk.js","sourcesContent":["import React from  'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tif(true){\r\n\t\tthrow new Error('NOOOO!!!');\r\n\t}\r\n\tconst cardComponent = robots.map((user,i) => {\r\n\t\treturn  (<Card \r\n\t\t         key={i} \r\n\t\t         id={robots[i].id} \r\n\t\t         name={robots[i].name} \r\n\t\t         email={robots[i].email}\r\n\t\t         />\r\n\t           )\r\n\t})\r\n  return (\r\n          <div>\r\n              {cardComponent};\r\n          </div>\r\n  \t     );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ Searchfield,SearchChange }) => {\r\n\treturn (\r\n\t\t    <div className = 'pa2'>\r\n              <input\r\n                className = 'pa3 ba b--green bg-light-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n                onChange={SearchChange}\r\n              />\r\n         </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info){\r\n\tthis.setState({ hasError: true})\r\n}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops!That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nimport CardList from '../Components/CardList';\r\n\r\nimport SearchBox from '../Components/SearchBox';\r\n\r\nimport './App.css';\r\n\r\nimport Scroll from '../Components/Scroll';\r\n\r\nimport ErrorBoundry from '../Components/ErrorBoundry'\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\nconstructor() {\r\n\r\nsuper()\r\n\r\nthis.state = {\r\n\r\nrobots: [],\r\n\r\nSearchfield: ''\r\n\r\n}\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(users => this.setState({ robots: users}));\r\n}\r\n\r\nonSearchChange = (event) => {\r\n\r\nthis.setState({ Searchfield: event.target.value})\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nrender() {\r\n\r\nconst filteredRobots= this.state.robots.filter(robot => {\r\n\r\nreturn robot.name.toLowerCase().includes(this.state.Searchfield.toLowerCase());\r\n\r\n})\r\n\r\nif(this.state.robots.length === 0) {\r\n\treturn <h1 className='tc'>Loading....</h1>\r\n} else {\r\n      return (\r\n\r\n         <div className = 'tc'>\r\n\r\n             <h1 className='f1'> Robo Friends </h1>\r\n\r\n             <SearchBox SearchChange={this.onSearchChange}/>\r\n             <Scroll>\r\n                <ErrorBoundry>\r\n                <CardList robots = {filteredRobots} />\r\n                </ErrorBoundry>\r\n             </Scroll>\r\n         </div>\r\n\r\n      );\r\n\r\n     }\r\n\r\n   }\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';                                                                   \nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}